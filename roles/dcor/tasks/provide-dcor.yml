- name: Make sure nginx is not running
  systemd:
    name: nginx
    state: stopped
- name: Install Python tools
  ansible.builtin.apt:
    name:
    - python3-pip
    - python3-dev
    - python3-venv
    - build-essential
- name: Create scratch directory
  ansible.builtin.file:
    path: "{{ DCOR_SCRATCH_DIRECTORY }}"
    state: directory
- name: Fetch CKAN_INI configuration from template
  set_fact:
    ckan_ini_data: "{{ lookup('template', 'ckan_ini.yml.j2') }}"
- name: Populate CKAN_INI configuration
  community.general.ini_file:
    path: "{{ CKAN_INI }}"
    section: "app:main"
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_items:
    - "{{ ckan_ini_data | from_yaml | dict2items }}"
- name: Install DCOR
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      source {{ CKAN_ENVIRONMENT_ACTIVATE }}
      pip install --upgrade pip
      pip install --upgrade wheel
      pip install {{ "--upgrade" if DCOR_DEVELOP | bool == false }} dcor_control
  environment:
    CKAN_INI: "{{ CKAN_INI }}"
- name: Run dcor develop
  when: DCOR_DEVELOP | bool == true
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      source {{ CKAN_ENVIRONMENT_ACTIVATE }}
      dcor develop --yes
  environment:
    CKAN_INI: "{{ CKAN_INI }}"
- name: Run dcor inspect
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      source {{ CKAN_ENVIRONMENT_ACTIVATE }}
      dcor inspect --assume-yes
  environment:
    CKAN_INI: "{{ CKAN_INI }}"
- name: Install mailx for automated emails
  when: EMAIL_SMTP_SERVER != ""
  ansible.builtin.apt:
    name: bsd-mailx
- name: Remove default CKAN nginx configuration
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/ckan
    state: absent
- name: Add DCOR nginx configuration
  ansible.builtin.template:
    # Depending on whether HTTPS is enabled or not, a different config is used.
    src: "etc_nginx_{{ 'https' if DCOR_HTTPS_ENABLED else 'http_only' }}.conf.j2"
    dest: /etc/nginx/sites-available/dcor
    owner: root
    group: root
    mode: '0644'
- name: Enable DCOR nginx configuration
  file:
    src: /etc/nginx/sites-available/dcor
    dest: /etc/nginx/sites-enabled/dcor
    state: link
- name: Add DCOR UWSGI configuration
  ansible.builtin.template:
    # Depending on whether HTTPS is enabled or not, a different config is used.
    src: "etc_uwsgi.ini.j2"
    dest: /etc/ckan/default/ckan-uwsgi.ini
    owner: root
    group: root
    mode: '0644'
# There has been a lot of fuss about UWSGI and supervisor not working together
# properly. There could be a conflict about child UWSGI processes still being
# around and not cleaned up. I had a deadlock where the supervisor process
# was at 100% CPU and UWSGI not stopping. The `die-on-term` setting in
# UWSGI together with `SIGTERM` (normal behavior in supervisor) instead of
# sending `QUIT` (default workaround in CKAN supervisor config) solved this:
# https://github.com/unbit/uwsgi/issues/296#issuecomment-65894116
- name: Ensure supervisor sends SIGTERM to UWSGI
  ansible.builtin.lineinfile:
    path: /etc/supervisor/conf.d/ckan-uwsgi.conf
    regexp: '^stopsignal=QUIT'
    line: ";stopsignal=QUIT"
- name: Ensure supervisor sends SIGTERM to datapusher
  ansible.builtin.lineinfile:
    path: /etc/supervisor/conf.d/ckan-datapusher.conf
    regexp: '^stopsignal=QUIT'
    line: ";stopsignal=QUIT"
- name: Ensure "die-on-term" is set for datapusher
  community.general.ini_file:
    path: /etc/ckan/datapusher/datapusher-uwsgi.ini
    section: uwsgi
    option: die-on-term
    value: true
- name: Restart CKAN via supervisor
  community.general.supervisorctl:
    name: all
    state: restarted
- name: Reload nginx
  systemd:
    name: nginx
    state: reloaded
    enabled: yes
