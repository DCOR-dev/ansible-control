- name: Create backup and copy to controller into playbook_dir/backups
  block:
    - name: Advertise backup time
      set_fact:
        backup_time: "{{ now(utc=true,fmt='%Y-%m-%d_%H.%M.%S') }}"

    - name: Define backup names
      set_fact:
        # database
        backup_path_db: "/backups/postgresql/backup_{{ POSTGRESQL_CKAN_DATABASE }}_{{ backup_time }}.pgc"
        # storage (images of users and circles)
        backup_path: "/backups/full/backup_full_{{ backup_time }}.tar.bz2"

    - name: Ensure DB backup directory exist
      ansible.builtin.file:
        path: "/backups/postgresql"
        state: directory
        mode: '0770'
        owner: 'postgres'
        group: 'root'

    - name: Ensure full backup directory exist
      ansible.builtin.file:
        path: "/backups/full"
        state: directory
        mode: '0700'
        owner: 'root'
        group: 'root'

    - name: Backup database
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ POSTGRESQL_CKAN_DATABASE}}"
        state: dump
        target: "{{ backup_path_db }}"

    - name: Backup storage
      community.general.archive:
        path:
          - "{{ CKAN_INI_STORAGE_PATH }}"
          - "{{ backup_path_db }}"
        dest: "{{ backup_path }}"
        format: bz2

    - name: Specifying a path directly
      ansible.builtin.fetch:
        src: "{{ backup_path }}"
        dest: "{{ playbook_dir }}/backups/host-{{ inventory_hostname }}/"
        flat: yes
  when: backup_mode == "create"

- name: Restore backup from playbook_dir/backups/ansible_host/backup_full.tar.bz2
  block:
    - name: Hard-coded backup file
      set_fact:
        restore_path_local: "{{ playbook_dir }}/backups/host-{{ inventory_hostname }}/backup_full.tar.bz2"
        restore_unarchive: "/tmp/restore"

    - name: Install Dependencies
      ansible.builtin.apt:
        name: unzip
        state: latest

    - name: Ensure existing restores are removed
      ansible.builtin.file:
        path: "{{ restore_unarchive }}"
        state: absent

    - name: Recreate new restore directory
      ansible.builtin.file:
        path: "{{ restore_unarchive }}"
        state: directory
        mode: '0770'
        owner: 'postgres'
        group: 'root'

    - name: Extract postgresql from archive
      ansible.builtin.unarchive:
        src: "{{ restore_path_local }}"
        dest: "{{ restore_unarchive }}"
        include: ["backups"]

    - name: Clean current database
      ansible.builtin.shell:
        executable: bash
        cmd: |
          source {{ CKAN_ENVIRONMENT_ACTIVATE }}
          ckan db clean --yes

    - name: find database file
      ansible.builtin.find:
        paths: "{{ restore_unarchive }}/backups/postgresql"
        patterns: '*.pgc'
      # there should only be one database file
      register: dbfiles

    - name: Restore database
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ POSTGRESQL_CKAN_DATABASE}}"
        state: restore
        target: "{{ dbfiles.files[0].path }}"

    - name: Cleanup restore path
      ansible.builtin.file:
        path: "{{ restore_unarchive }}"
        state: absent

    - name: Remove CKAN_INI_STORAGE_PATH
      ansible.builtin.file:
        path: "{{ CKAN_INI_STORAGE_PATH }}"
        state: absent

    - name: Restore CKAN_INI_STORAGE_PATH from backup
      ansible.builtin.unarchive:
        src: "{{ restore_path_local }}"
        dest: "/"
        # the [1:] removes the leading slash which is not in the archive
        include: ["{{ CKAN_INI_STORAGE_PATH[1:] }}"]

    - name: Upgrade database (in case backup from older CKAN version)
      ansible.builtin.shell:
        executable: bash
        cmd: |
          source {{ CKAN_ENVIRONMENT_ACTIVATE }}
          ckan db upgrade

    - name: Rebuild search index
      ansible.builtin.shell:
        executable: bash
        cmd: |
          source {{ CKAN_ENVIRONMENT_ACTIVATE }}
          ckan search-index rebuild --clear
  environment:
    CKAN_INI: "{{ CKAN_INI }}"
  when: backup_mode == "restore"
